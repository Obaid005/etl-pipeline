version: '3.8'

# Production Docker Compose configuration
services:
  # ETL Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production # Use the production stage
    container_name: etl-pipeline
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - MONGO_URI=${MONGO_URI} # Use environment variable for MongoDB connection string
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./data:/app/data # Mount data directory for SQLite
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    networks:
      - etl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"    # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - etl-network

  # Redis Service (for caching/pub-sub if needed)
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etl-network

volumes:
  rabbitmq_data:
  redis_data:

networks:
  etl-network:
    driver: bridge 